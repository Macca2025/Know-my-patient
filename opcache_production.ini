; ================================================
; OPcache Production Configuration
; Know My Patient - Optimized Settings
; ================================================
; 
; INSTALLATION INSTRUCTIONS:
; Copy this file to: /opt/homebrew/etc/php/8.4/conf.d/99-opcache-production.ini
; 
; Command:
; sudo cp opcache_production.ini /opt/homebrew/etc/php/8.4/conf.d/99-opcache-production.ini
; 
; Then restart PHP/Apache:
; brew services restart php
; ================================================

[opcache]
; Enable OPcache
opcache.enable=1

; Enable OPcache for CLI (useful for testing)
opcache.enable_cli=0

; Memory Settings
; ================================================
; Increase memory from default 128MB to 256MB
; Recommended for applications with 1000+ PHP files
opcache.memory_consumption=256

; Interned strings buffer (for storing repeated strings)
; Default is 8MB, good for most applications
opcache.interned_strings_buffer=16

; File Caching
; ================================================
; Maximum number of files to cache
; Increased from 10000 to 20000 for large applications
; Calculate with: find . -type f -name "*.php" | wc -l
opcache.max_accelerated_files=20000

; Maximum percentage of wasted memory before restart
; Default 5% is fine
opcache.max_wasted_percentage=5

; Performance Optimization
; ================================================
; CRITICAL: Disable timestamp validation in PRODUCTION
; This prevents OPcache from checking if files have changed
; Must manually clear cache after code deployments
opcache.validate_timestamps=0

; How often to check timestamps (when validate_timestamps=1)
; Only used in development - ignored when validate_timestamps=0
opcache.revalidate_freq=0

; Enable faster file path resolution
opcache.use_cwd=1
opcache.revalidate_path=0

; Enable file cache (optional - stores cache on disk)
; Useful for shared hosting or when restarting PHP frequently
; opcache.file_cache=/tmp/opcache

; Security & Compatibility
; ================================================
; Keep comments for Doctrine/Annotations/PHPStan
opcache.save_comments=1

; Enable huge code pages (Linux only - requires kernel support)
; opcache.huge_code_pages=0

; Optimization level (default is maximum)
opcache.optimization_level=0x7FFEBFFF

; JIT Compiler (PHP 8.0+)
; ================================================
; Enable JIT for additional performance
; "tracing" mode is recommended for web applications
opcache.jit=tracing
opcache.jit_buffer_size=128M

; Monitoring & Debugging
; ================================================
; Error log file (helpful for debugging)
; opcache.error_log=/var/log/php/opcache.log

; Log verbosity (1=fatal, 2=errors, 3=warnings, 4=info)
opcache.log_verbosity_level=1

; Preloading (PHP 7.4+)
; ================================================
; Preload frequently used files on startup
; Requires creating a preload script
; opcache.preload=/path/to/preload.php
; opcache.preload_user=www-data

; ================================================
; PERFORMANCE IMPACT ESTIMATES
; ================================================
; Expected improvements with these settings:
; - Initial page load: ~20-30% faster
; - Subsequent requests: ~50-70% faster
; - Memory usage: +128MB PHP process memory
; - CPU usage: -30% (fewer compilations)
;
; Real-world metrics (typical app):
; - Without OPcache: 150-200ms response time
; - With OPcache: 50-80ms response time
; ================================================

; ================================================
; DEPLOYMENT WORKFLOW
; ================================================
; After deploying new code, clear OPcache:
; 
; Option 1: Restart PHP-FPM
; sudo brew services restart php
;
; Option 2: Use OPcache reset script
; Create a file: /public/opcache-reset.php
; <?php
; opcache_reset();
; echo "OPcache cleared!";
; ?>
;
; Option 3: Use CLI
; php -r "opcache_reset();"
; ================================================
